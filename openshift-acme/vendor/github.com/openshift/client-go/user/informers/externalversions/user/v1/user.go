// This file was automatically generated by informer-gen

package v1

import (
	user_v1 "github.com/openshift/api/user/v1"
	versioned "github.com/openshift/client-go/user/clientset/versioned"
	internalinterfaces "github.com/openshift/client-go/user/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/client-go/user/listers/user/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// UserInformer provides access to a shared informer and lister for
// Users.
type UserInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.UserLister
}

type userInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewUserInformer constructs a new informer for User type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewUserInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.UserV1().Users().List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.UserV1().Users().Watch(options)
			},
		},
		&user_v1.User{},
		resyncPeriod,
		indexers,
	)
}

func defaultUserInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewUserInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *userInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&user_v1.User{}, defaultUserInformer)
}

func (f *userInformer) Lister() v1.UserLister {
	return v1.NewUserLister(f.Informer().GetIndexer())
}
