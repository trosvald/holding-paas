// This file was automatically generated by informer-gen

package v1

import (
	network_v1 "github.com/openshift/api/network/v1"
	versioned "github.com/openshift/client-go/network/clientset/versioned"
	internalinterfaces "github.com/openshift/client-go/network/informers/externalversions/internalinterfaces"
	v1 "github.com/openshift/client-go/network/listers/network/v1"
	meta_v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
	time "time"
)

// EgressNetworkPolicyInformer provides access to a shared informer and lister for
// EgressNetworkPolicies.
type EgressNetworkPolicyInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.EgressNetworkPolicyLister
}

type egressNetworkPolicyInformer struct {
	factory internalinterfaces.SharedInformerFactory
}

// NewEgressNetworkPolicyInformer constructs a new informer for EgressNetworkPolicy type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewEgressNetworkPolicyInformer(client versioned.Interface, namespace string, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options meta_v1.ListOptions) (runtime.Object, error) {
				return client.NetworkV1().EgressNetworkPolicies(namespace).List(options)
			},
			WatchFunc: func(options meta_v1.ListOptions) (watch.Interface, error) {
				return client.NetworkV1().EgressNetworkPolicies(namespace).Watch(options)
			},
		},
		&network_v1.EgressNetworkPolicy{},
		resyncPeriod,
		indexers,
	)
}

func defaultEgressNetworkPolicyInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewEgressNetworkPolicyInformer(client, meta_v1.NamespaceAll, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc})
}

func (f *egressNetworkPolicyInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&network_v1.EgressNetworkPolicy{}, defaultEgressNetworkPolicyInformer)
}

func (f *egressNetworkPolicyInformer) Lister() v1.EgressNetworkPolicyLister {
	return v1.NewEgressNetworkPolicyLister(f.Informer().GetIndexer())
}
